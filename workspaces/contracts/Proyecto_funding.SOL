
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract Proyecto_funding{

    string public id;
    string public name;
    string public descripcion;
    address payable public walletAutor;
    uint public state=0;
    uint public funds; //Almacena todos los aportes
    uint public fundRaisingGoal; //Cuanto se espera ganar con la ronda de fundraising

    constructor (string memory _id, string memory _name, string memory _descripcion, uint _fundRaisingGoal) {
        id=_id;
        name=_name;
        descripcion=_descripcion;
        fundRaisingGoal=_fundRaisingGoal;
        walletAutor=payable(msg.sender); //no entiendo
    }  


    modifier requireChangeName() {
        require( msg.sender == walletAutor, "no puede modificar el proyecto"); 
        _;
    }

    modifier  requireFundProyect () {
        require(msg.sender != walletAutor, "un autor del proyecto no puede autofinanciarse");
        _;

    }
    
    event eveContribuidor(address walletInversor, uint valueContribucion);
    event eveStateChanche(string id, uint state);

    function fundProject () public payable requireFundProyect { //funcion que registra el aporte
    
        
        require(state != 1, "la financiacion esta cerrada");
        require(msg.value > 0 , "no se pude aportar cero fondos");     
        
        walletAutor.transfer(msg.value);
        funds+=msg.value;
        emit eveContribuidor(msg.sender, msg.value); 
            
    }

    function changeProjectState(uint  newStage) public requireChangeName{
        
        //require(state != newStage, "ngfn");
        state=newStage;
        emit eveStateChanche(id, state);

    }
}
