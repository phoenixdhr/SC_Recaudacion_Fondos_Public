
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract Proyecto_funding{


    struct Proyecto {
        string  id;
        string  name;
        string  descripcion;
        address payable  walletAutor;
        uint  state;
        uint  funds; //Almacena todos los aportes
        uint  fundRaisingGoal; //Cuanto se espera ganar con la ronda de fundraising
    }

    Proyecto public proyecto;



    constructor (string memory _id, string memory _name, string memory _descripcion, uint _fundRaisingGoal) {
        
        proyecto = Proyecto(_id, _name, _descripcion, payable(msg.sender), 0, 0, _fundRaisingGoal);

    }  


    modifier requireChangeName() {
        require( msg.sender == proyecto.walletAutor, "no puede modificar el proyecto"); 
        _;
    }

    modifier  requireFundProyect () {
        require(msg.sender != proyecto.walletAutor, "un autor del proyecto no puede autofinanciarse");
        _;

    }
    
    event eveContribuidor(address walletInversor, uint valueContribucion);
    event eveStateChanche(string id, uint state);

    function fundProject () public payable requireFundProyect { //funcion que registra el aporte
    
        
        require(proyecto.state != 1, "la financiacion esta cerrada");
        require(msg.value > 0 , "no se pude aportar cero fondos");     
        
        proyecto.walletAutor.transfer(msg.value);
        proyecto.funds+=msg.value;
        emit eveContribuidor(msg.sender, msg.value); 
            
    }

    function changeProjectState(uint  newStage) public requireChangeName{
        
        //require(state != newStage, "ngfn");
        proyecto.state=newStage;
        emit eveStateChanche(proyecto.id, proyecto.state);

    }
}
